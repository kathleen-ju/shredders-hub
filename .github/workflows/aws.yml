name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main", "run-tests-on-pipeline" ]

env:
  AWS_REGION: ap-southeast-2                  
  ECR_REPOSITORY: dotnet-user-api
  TARGET_DIR: ./

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore 
      - name: Build
        run: dotnet build --configuration Release --no-restore 
      - name: Test
        run: dotnet test --no-restore --verbosity minimal
      - name: Cancelling parallel jobs
        if: failure()
        uses: andymckay/cancel-action@0.2
        
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}${{ github.run_attempt }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Run docker image on server
      uses: appleboy/ssh-action@v0.1.6
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}${{ github.run_attempt }}
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        envs: ECR_REGISTRY, IMAGE_TAG
        script: |
          docker stop $(docker ps -q)
          aws ecr get-login-password --region ${{ env.AWS_REGION}} | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker pull $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker run --rm -d -p 5000:5000 -p 5001:5001 -e ASPNETCORE_HTTP_PORT=https://+5001 -e ASPNETCORE_URLS=http://+:5000 $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          